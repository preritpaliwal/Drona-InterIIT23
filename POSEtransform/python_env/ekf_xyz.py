#!/usr/bin/env python3
import numpy as np
import matplotlib.pyplot as plt
 

estimated = []
estimated_x = []
x_coord = []
sensor1_x = []
sensor2_x = []
#Extended Kalman Filter
np.set_printoptions(precision=3,suppress=True)
g = 9.81 # accleration due to gravity
m = 1.0
ix = 1.0
iy = 1.0
iz = 1.0

#Process Noise
process_noise_v_k_minus_1 = np.array([0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
     
# State Model Noise Covariance Matrix Q_k
# Q is a square matrix that has the same number of rows as states.
Q_k = np.eye(12, dtype=np.float32)
                 
# Measurement matrix H_k
# H has the same number of rows as sensor measurements and same number of columns as states.
H_k = np.array([[1.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 1.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 1.0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])
                         
# Sensor measurement noise covariance matrix R_k
# If we are sure about the measurements, R will be near zero.
R_k = np.array([[0.37204485,-0.0042922,0.00638548],
 [-0.0042922,0.18774207,-0.01803895],
 [ 0.00638548,-0.01803895,0.13632]]
)  

# Sensor measurement noise covariance matrix R_k_1
# If we are sure about the measurements, R will be near zero.
R_k_1 = np.array([[0.2980565,0.03990039,0.01681866],
 [0.03990039,0.13436595,0.01088073],
 [0.01681866,0.01088073,0.62214558]]
) 

                 
# Sensor noise. This is a vector with the
# number of elements equal to the number of sensor measurements.
sensor_noise_w_k = np.array([0.0,0.0,0.0])
sensor_noise_w_k_1 = np.array([0.0,0.0,0.0])


def A_k_minus_1(dt):
    mat =  np.array([[0, 0, 0, 1.0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 1.0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 1.0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, -g, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, g,  0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 1.0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],])*dt + np.eye(12)
    return mat

def B_k_minus_1(dt):
    B = np.array([[0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [1/m, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 1/ix, 0, 0],
                [0, 0, 1/iy, 0],
                [0, 0, 0, 1/iz]])*dt 
    return B
def ekf(z_k_observation_vector, z_k_observation_vector_2, state_estimate_k_minus_1, 
        control_vector_k_minus_1, P_k_minus_1, dk):
    
    ######################### Predict #############################
    # Predict the state estimate at time k based on the state 
    # estimate at time k-1 and the control input applied at time k-1.
    state_estimate_k = A_k_minus_1(dk) @ (
            state_estimate_k_minus_1) + (B_k_minus_1(dk)) @ (control_vector_k_minus_1) + (
            process_noise_v_k_minus_1)
    
    print(f'State Estimate Before EKF={state_estimate_k}')
             
    # Predict the state covariance estimate based on the previous
    # covariance and some noise
    P_k = A_k_minus_1(dk) @ P_k_minus_1 @ A_k_minus_1(dk).T + (Q_k)
         
    ################### Update (Correct) ##########################
    # Calculate the difference between the actual sensor measurements
    # at time k minus what the measurement model predicted 
    # the sensor measurements would be for the current timestep k.

    
    measurement_residual_y_k = z_k_observation_vector - (
            (H_k @ state_estimate_k) + (
            sensor_noise_w_k))
 
    print(f'Observation={z_k_observation_vector}')
             
    # Calculate the measurement residual covariance
    S_k = H_k @ P_k @ H_k.T + R_k
         
    # Calculate the near-optimal Kalman gain
    # We use pseudoinverse since some of the matrices might be non-square or singular.
    K_k = P_k @ H_k.T @ np.linalg.pinv(S_k)
         
    # Calculate an updated state estimate for time k
    state_estimate_k = state_estimate_k + (K_k @ measurement_residual_y_k)
     
    # Update the state covariance estimate for time k
    M = K_k @ H_k
    P_k = (np.eye(M.shape[0]) - M) @ P_k @ (np.eye(M.shape[0]) - M).T + K_k @ R_k @ K_k.T #P_k - (K_k @ H_k @ P_k)

    print(f'State Estimate After first update={state_estimate_k}')
     ################### Update Again for another sensor##########################
    measurement_residual_y_k_2 = z_k_observation_vector_2 - (
            (H_k @ state_estimate_k) + sensor_noise_w_k_1)
    S_k = H_k @ P_k @ H_k.T + R_k_1
    K_k = P_k @ H_k.T @ np.linalg.pinv(S_k)
    state_estimate_k = state_estimate_k + (K_k @ measurement_residual_y_k_2)
    
    M = K_k @ H_k
    P_k = (np.eye(M.shape[0]) - M) @ P_k @ (np.eye(M.shape[0]) - M).T + K_k @ R_k @ K_k.T #P_k - (K_k @ H_k @ P_k)

    # Print the best (near-optimal) estimate of the current state of the robot
    print(f'State Estimate After second update={state_estimate_k}')
    estimated_x.append(state_estimate_k[2])
    estimated.append(state_estimate_k)
    sensor1_x.append(z_k_observation_vector[2])
    sensor2_x.append(z_k_observation_vector_2[2])

 
    # Return the updated state and covariance estimates
    return state_estimate_k, P_k
     
def main():
 
    # We start at time k=1
    k = 1
     
    # Time interval in seconds
    dk = 1
    
    # fOR ARUCO sensor
    # Create a list of sensor observations at successive timesteps
    # Each list within z_k is an observation vector.
    z_k = np.array([[ 0.7055589627869754 , 0.11340512957058868 , 0.5265326107416043 ] ,
[ -0.008690189148783167 , 0.3496918079013309 , 1.5295314691537671 ] ,
[ 0.28529130982447715 , -0.009295737492758915 , 2.5792230780088334 ] ,
[ 0.03872836582389949 , 0.21532596748493016 , 4.861796753402349 ] ,
[ -0.430269549648604 , 0.20896289292746828 , 5.110759807509085 ] ,
[ 0.5346758816315953 , -0.36450478088609456 , 5.896849187742738 ] ,
[ 0.15054278364530238 , -0.6773831418572649 , 6.606508188977585 ] ,
[ 0.5468476457211564 , -0.07695469727728277 , 8.65668632005633 ] ,
[ -0.5001671393339906 , -0.4506772464606422 , 8.941195026441148 ] ,
[ 0.7271301169108828 , -0.3258568559624942 , 10.51316896325299 ] ,
[ -0.15801804842531775 , -0.16251923649068634 , 10.665175867539563 ] ,
[ -0.23320887402338641 , 0.5404489096715177 , 11.77616347756252 ] ,
[ -0.13624322166023206 , -0.5279302252051434 , 13.748600150380419 ] ,
[ -0.2519635044551334 , -0.413101087144209 , 14.247151525389958 ] ,
[ 0.8348874058854827 , -0.2601564989764119 , 14.959242367571502 ] ,
[ -0.09072385828874219 , 0.09040971810941723 , 16.245056576904823 ] ,
[ 0.776729636806315 , 0.5078351661681044 , 17.60010590613653 ] ,
[ 0.5345530235195874 , -0.12000338144390765 , 18.265052189873384 ] ,
[ -0.4340868133902511 , -0.6887645911823853 , 19.49387966513012 ] ,
[ -0.8113426026228296 , -0.44113261953848526 , 20.197293031314143 ] ,
[ -0.6872176775673042 , -0.0653648376173106 , 21.845389048792295 ] ,
[ -0.7299195700886438 , 0.665849125360434 , 21.857892191289974 ] ,
[ -0.037687835199566866 , -0.32903032170659935 , 23.445146241597953 ] ,
[ -0.5050700411201423 , 0.455185677536573 , 23.738297757042886 ] ,
[ 0.2629255484824835 , -0.6721874946645692 , 24.740514913443615 ] ,
[ 0.026800596267635868 , 0.5661877718359849 , 25.737922790685744 ] ,
[ -0.8262182383205334 , 0.20310092552301584 , 26.84975693295674 ] ,
[ -0.7957129362182749 , 0.34513545507778587 , 27.87676848665448 ] ,
[ -0.9402552318375748 , -0.10384040499562297 , 28.74416731280985 ] ,
[ 0.6584541498913619 , 0.040661997568595565 , 30.084021214981878 ] ,
[ 0.18227900033264377 , -0.05792323679152911 , 31.207607439958203 ] ,
[ -0.1917654028004434 , 0.2213874570796457 , 31.67708009547338 ] ,
[ -0.6492024148218094 , -0.43914502951998124 , 32.81982532390618 ] ,
[ -0.9143991103799765 , -0.35365328373647564 , 34.84146527853531 ] ,
[ 0.8240521726250192 , -0.15317833836001649 , 35.01852129493044 ] ,
[ -0.9910991864385352 , -0.07878463303692151 , 36.6657173222774 ] ,
[ -0.09355668429984942 , -0.7581062985825658 , 37.47658747188411 ] ,
[ 0.012066435574445755 , 0.5324493330681994 , 37.50886819299724 ] ,
[ -0.5025687306903752 , 0.4409747264766375 , 38.549371344895384 ] ,
[ 0.015870192866134225 , 0.6581862136781564 , 39.534552515084194 ] ,
[ -0.2937604200370809 , -0.4719406704378877 , 40.99626232247017 ] ,
[ 0.16623953010819337 , -0.6653454891656921 , 42.30893929090975 ] ,
[ 0.47489306411644083 , -0.06875723537833389 , 43.101401604508474 ] ,
[ 0.05079165688342924 , -0.18024050323039575 , 44.31947411951525 ] ,
[ 0.9192710702881084 , 0.14819374405935637 , 45.098924128849546 ] ,
[ 0.3042095041980468 , 0.25231175843679 , 46.428639242276596 ] ,
[ -0.11437893234777086 , 0.6494389011346164 , 46.99956923837044 ] ,
[ 0.9232536635406481 , -0.17582967524886373 , 48.252623383216125 ] ,
[ 0.49909904648195114 , -0.39444840563876005 , 49.07361060017705 ] ,
[ 0.9410674046669305 , 0.5182592814645772 , 50.27810494699607 ] ,
[ -0.9157724777724119 , -0.35098701101258556 , 51.252618892144476 ] ,
[ -0.5867172006979184 , -0.619209696298388 , 52.248788125965206 ] ,
[ -0.8223636954803759 , 0.6074197372632284 , 52.92039277424681 ] ,
[ 0.4095473812441872 , -0.5482485846108534 , 54.01115911401009 ] ,
[ 0.8146421462296207 , 0.1569862175361213 , 55.41899648949892 ] ,
[ -0.8024701197602653 , -0.5256876974817952 , 56.1871062216569 ] ,
[ -0.4254923763340408 , -0.041797333932880876 , 57.46773656335693 ] ,
[ -0.5949124716773961 , 0.2944360078903485 , 57.50625596581956 ] ,
[ -0.7529046522509573 , -0.14722266338271617 , 59.000945450878035 ] ,
[ 0.5443900095803829 , -0.012024775806437571 , 60.35708425301777 ] ,
[ -0.9788876786945369 , 0.19996779359085126 , 60.629358564956405 ] ,
[ -0.31509615926837165 , -0.4036922545958482 , 62.31310792139929 ] ,
[ -0.5327633001579175 , 0.5758027945301085 , 63.24996203733463 ] ,
[ 0.8587102304652494 , -0.32158115190869674 , 64.54098528579325 ] ,
[ -0.7944490704203653 , 0.26957145603965205 , 65.35183659087956 ] ,
[ -0.4002231578262889 , -0.19274857969634707 , 66.50017593121 ] ,
[ -0.556077005088139 , 0.6197325611375462 , 67.37011198813613 ] ,
[ 0.9596952270212165 , -0.4403484113251272 , 68.10470075533438 ] ,
[ -0.5216651909028398 , -0.571134079802055 , 68.64349150190868 ] ,
[ -0.24585421758948867 , -0.45982600828904696 , 70.85754467025727 ] ,
[ 0.9305395098849418 , 0.5065418447411516 , 71.33576723130916 ] ,
[ -0.9462324180918988 , -0.33929339447442913 , 71.71142555081019 ] ,
[ -0.3607579723109424 , -0.0347776306484211 , 73.23366601544141 ] ,
[ 0.5251371629124519 , 0.13043417472868613 , 73.95825057193088 ] ,
[ 0.6041317590666246 , 0.30315056337390156 , 75.2906427786048 ] ,
[ -0.2634853195952356 , 0.38633690593810655 , 75.74206637937777 ] ,
[ 0.672174341746892 , -0.7585779324191588 , 77.04697231059902 ] ,
[ 0.9365209308860232 , 0.3905323001498704 , 78.10847995192383 ] ,
[ -0.9105620144068596 , 0.3466547774600033 , 79.79315673519082 ] ,
[ 0.4156254347449724 , -0.7541293078678034 , 80.38633059481239 ] ,
[ -0.8106473985200231 , -0.42573900671601 , 80.99800872839803 ] ,
[ -0.32724183847019095 , 0.6048589764913908 , 82.48043063635939 ] ,
[ 0.3807580840213596 , -0.5894079050529265 , 82.98308926906309 ] ,
[ -0.47394439958854684 , -0.7344513209714936 , 83.57107801065743 ] ,
[ 0.9208576330524767 , 0.29152625596376525 , 84.58877804978208 ] ,
[ -0.5797862954479567 , 0.36521497327124797 , 85.5608551477185 ] ,
[ 0.8021155196998222 , -0.6672151124920807 , 86.84484115529793 ] ,
[ -0.5236674525485816 , 0.35792002100364595 , 87.83297166435008 ] ,
[ 0.030168706307412974 , 0.43092071609554616 , 89.49326375600162 ] ,
[ -0.9306510232154663 , -0.6671148772795072 , 90.093929717726 ] ,
[ -0.4338144275819933 , -0.08271580690837443 , 91.12202003247045 ] ,
[ -0.4538201990214725 , -0.19858894468657262 , 92.39395961910014 ] ,
[ -0.511145493816549 , -0.5345298330775112 , 93.50645268697647 ] ,
[ 0.8626877460028315 , 0.5783832519513048 , 93.99311982246938 ] ,
[ 0.626571728702908 , 0.20937842070953372 , 94.94593178670196 ] ,
[ -0.16939142313299782 , -0.5297454667824757 , 95.59867797893787 ] ,
[ 0.9457107305924635 , -0.6640610978174208 , 97.03701139563292 ] ,
[ -0.7373182454624705 , 0.6254618029753927 , 98.67302413618768 ] ,
[ -0.551844993451003 , -0.6404663213624369 , 98.70531874355797 ] ,
[ 0.3576011407245552 , -0.45718834186830315 , 100.79421467648224 ]])# k=5

    #For Depth Sensor    
    z_k_1 = np.array([[ 0.27699706903077015 , 0.9723336686129282 , 2.227500713851925 ] ,
[ -0.36589252201579336 , -0.14741910244199433 , 2.1527596323632903 ] ,
[ -0.08254345360133275 , 0.10034203787805102 , 2.861487048436457 ] ,
[ -1.1258536971807005 , 0.04385199846398752 , 3.2695103635567353 ] ,
[ -0.7583025382633661 , 0.06601280572832752 , 4.040828303844806 ] ,
[ -0.4315603114424882 , 0.31668749008711244 , 5.648033490562795 ] ,
[ -0.46882815612191353 , 0.46108608423256353 , 6.39783887084114 ] ,
[ 0.6517899104902021 , 0.737821638612115 , 7.903358795922141 ] ,
[ -0.7250074805452296 , -0.22289003735244467 , 10.352016182867201 ] ,
[ -0.6141384078833295 , 0.27633833891408116 , 9.592707633113825 ] ,
[ -0.10098431421781218 , 0.3092464322185066 , 10.037628669186992 ] ,
[ 0.3993129150672283 , 0.7291473108456299 , 11.60148745521451 ] ,
[ -1.015005229147173 , 0.6442008732442741 , 14.027948726148967 ] ,
[ -0.8490322644688861 , 0.8132164311826944 , 15.454866930584936 ] ,
[ -0.7117578716262443 , -0.1810547813271382 , 16.463212315026983 ] ,
[ -0.9962511810257652 , 0.5238462331986078 , 15.987707228192077 ] ,
[ 0.20511330529195893 , 0.19768573681205653 , 17.722577535660466 ] ,
[ -0.5390252299449051 , 0.9221720657829278 , 17.580274466890078 ] ,
[ -0.09846669767945126 , 0.09563221372609654 , 20.455121974088243 ] ,
[ -0.7900790194234946 , 0.4876801298460757 , 20.179678271673506 ] ,
[ -1.090746458622239 , 0.8742555442321793 , 21.635982875468613 ] ,
[ -1.0150004558634793 , 0.46766397892153105 , 23.055756921408886 ] ,
[ 0.43219709300583053 , 0.9530058904969798 , 22.862124978246968 ] ,
[ 0.5565343896186246 , 0.6173084902800032 , 23.030230656974084 ] ,
[ 0.15690574326492301 , 0.9565493672912526 , 24.352752935554214 ] ,
[ 0.15632097254935418 , 0.23713409613719388 , 27.21873099285224 ] ,
[ -0.5069584144973037 , 0.7176654618661493 , 26.063509734177956 ] ,
[ -0.23172839600683814 , 0.27822957446731406 , 27.625847145790654 ] ,
[ -0.263355582020004 , 0.46860660633540246 , 29.919600707048875 ] ,
[ -0.16113012219982914 , 0.523412639625106 , 31.344330679052813 ] ,
[ -0.8893009984645124 , 0.6306832821784853 , 32.45390097130564 ] ,
[ -1.067621721578988 , -0.05778434615341807 , 31.300536221192424 ] ,
[ 0.6347162342017227 , 0.4662505896371986 , 32.586640045692064 ] ,
[ -0.5681172665650788 , -0.2294877363731038 , 34.8832690192178 ] ,
[ -1.0297715249450847 , -0.2130826487059574 , 34.53991430025507 ] ,
[ -1.170770654022881 , -0.030467235043920404 , 35.35272672277996 ] ,
[ -0.6930564598723707 , 0.8223798928313806 , 37.2663900930123 ] ,
[ 0.39209621749803114 , -0.24501278979730742 , 38.48926536866859 ] ,
[ -1.0429923961328336 , 0.2003613101807335 , 40.19168974401999 ] ,
[ 0.568310926353089 , 0.4711078160204098 , 39.26460094686293 ] ,
[ -0.5436249863805251 , 0.7941921581904565 , 41.34048740479601 ] ,
[ -1.1140680237830651 , 0.512476416851549 , 42.103629928223405 ] ,
[ 0.4719593077635569 , -0.08266060814960488 , 43.0621147345117 ] ,
[ 0.3604669414775503 , -0.045826616331410996 , 45.13685397405196 ] ,
[ -0.9721909982825707 , -0.09016199223081448 , 44.24184889940746 ] ,
[ 0.6383514021777146 , 0.6179872466867302 , 46.7135049001072 ] ,
[ -1.0186780519352114 , 0.4228450549234631 , 48.33650849651684 ] ,
[ -0.7215130017492694 , 0.38362406358328643 , 49.24431038194096 ] ,
[ -0.033440664681390064 , 0.27578255308740246 , 50.13263056738936 ] ,
[ -0.4458041241019709 , -0.24909654274857243 , 50.3212799111289 ] ,
[ 0.4149541675880095 , -0.07051368183855014 , 51.21708765076484 ] ,
[ -0.4054268361163774 , 0.39714134579936494 , 53.134357767951535 ] ,
[ 0.1500286912902331 , 0.3005948805556578 , 53.795647316819256 ] ,
[ -0.5032053183868852 , -0.0170189646900456 , 54.154216914069195 ] ,
[ -0.8615671837859379 , -0.26631850988615224 , 56.46932150451439 ] ,
[ 0.6467288254138874 , 0.5676275742574959 , 56.65146352229396 ] ,
[ -0.7350324705106843 , 0.664327147971429 , 56.4172690266406 ] ,
[ 0.3383611825194863 , 0.9169746115471371 , 57.32645845642027 ] ,
[ -0.9874495072842707 , -0.2814451768157856 , 58.111170619868965 ] ,
[ 0.6270270463352148 , -0.14519375736585569 , 59.03069831352216 ] ,
[ 0.2466922314072777 , 0.6588832245312262 , 61.98509158664275 ] ,
[ 0.053643689075876466 , 0.6843850043399746 , 62.53430581759492 ] ,
[ -0.3111166829489215 , 0.45850279162035673 , 62.77404684073546 ] ,
[ -0.6343003882656708 , 0.4428315570509796 , 63.05837427846815 ] ,
[ 0.30151418168923083 , -0.10822059299438144 , 65.25850527610855 ] ,
[ 0.6126574474476396 , -0.042570713636780944 , 66.40466927667693 ] ,
[ -0.8297236872180511 , 0.2748542651491434 , 66.70445751492684 ] ,
[ -0.7063472187425912 , 0.5512668641553695 , 67.47380437067542 ] ,
[ -0.20259114356531305 , 0.7131584861061944 , 68.70282159798 ] ,
[ 0.18791858134131267 , 0.7659549371574352 , 70.11936961169428 ] ,
[ 0.2776983931479051 , 0.8415039392296653 , 72.15103110043874 ] ,
[ -0.37487838393479245 , -0.12061786191095056 , 72.33208555565282 ] ,
[ 0.09138483255130536 , 0.6209162148937153 , 73.67013041751615 ] ,
[ -0.18594515932793043 , 0.9799825273813338 , 75.06639953835382 ] ,
[ 0.5354161819587249 , 0.4693940567680885 , 76.02446119800989 ] ,
[ -0.2815625252069692 , 0.6598910662612723 , 75.28956633875704 ] ,
[ 0.44340163418628653 , 0.3557532562782441 , 77.83411163007071 ] ,
[ 0.2961279162080246 , 0.23918151630944334 , 77.38196052193626 ] ,
[ -0.13469503856032694 , -0.27188517743376833 , 79.06995400594462 ] ,
[ 0.05530029361290367 , 0.44802443818952525 , 79.33423647961725 ] ,
[ -0.13848814213729121 , 0.6272918934439895 , 80.45136500563824 ] ,
[ 0.2988621065662058 , 0.6737960565170387 , 82.67572719996994 ] ,
[ 0.1523957932016502 , 0.8119559185399934 , 84.20026720562629 ] ,
[ -0.7761664139619935 , 0.6003705572096791 , 83.52149916906207 ] ,
[ -0.14363964441225074 , 0.49998198298521684 , 84.37094855627733 ] ,
[ 0.130343589167363 , 0.927827840289893 , 85.83177192786891 ] ,
[ 0.48826822374247536 , 0.25800494807937174 , 86.2455085090928 ] ,
[ -0.7329265368205147 , 0.33596241660433573 , 87.21453222580004 ] ,
[ 0.4062625187371427 , 0.745669179242392 , 90.2909714370004 ] ,
[ 0.10748154407595822 , 0.34379918934109105 , 90.9610595123509 ] ,
[ 0.018736286561784388 , 0.7363188725014254 , 91.20031186052445 ] ,
[ -0.39326632873764744 , 0.13466462520127043 , 92.0665439921739 ] ,
[ -0.7670877010343169 , 0.6448875606314648 , 93.75565313854476 ] ,
[ -0.6012469380519584 , 0.4169567600525798 , 93.61808438560264 ] ,
[ -0.6906434857151585 , -0.09779895427967203 , 94.12377094179243 ] ,
[ -0.5767130571150385 , -0.1930981758939332 , 95.4976764122699 ] ,
[ -0.6922588786535785 , -0.1082305441323902 , 96.25375448314432 ] ,
[ -0.4935389480912892 , 0.14623063814623838 , 98.97008896384943 ] ,
[ -0.6038352998617164 , 0.8461170072222353 , 98.06432392048298 ] ,
[ -1.1010191314599242 , -0.024894259822106357 , 101.22467233111944 ]])# k=5
                     
    # The estimated state vector at time k-1 in the global reference frame.
    # [x_k_minus_1, y_k_minus_1, yaw_k_minus_1]
    # [meters, meters, radians]
    state_estimate_k_minus_1 = np.array([0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0])
     
    # The control input vector at time k-1 in the global reference frame.
    # [v, yaw_rate]
    # [meters/second, radians/second]
    # In the literature, this is commonly u.
    # Because there is no angular velocity and the robot begins at the 
    # origin with a 0 radians yaw angle, this robot is traveling along 
    # the positive x-axis in the global reference frame.
    control_vector_k_minus_1 = np.array([0 , 0, 0, 0])
     
    # State covariance matrix P_k_minus_1
    # This matrix has the same number of rows (and columns) as the 
    # number of states (i.e. 3x3 matrix). P is sometimes referred
    # to as Sigma in the literature. It represents an estimate of 
    # the accuracy of the state estimate at time k made using the
    # state transition matrix. We start off with guessed values.
    P_k_minus_1 = np.zeros((12,12), dtype=np.float32)#0.01*np.eye(18, dtype=np.float32)
                             
    # Start at k=1 and go through each of the 5 sensor observations, 
    # one at a time. 
    # We stop right after timestep k=5 (i.e. the last sensor observation)
    for k, obs_vector_z_k in enumerate(z_k, start=1):
        # print(z_k_2[k-1].shape)
        # Print the current timestep
        print(f'Timestep k={k}')  
         
        # Run the Extended Kalman Filter and store the 
        # near-optimal state and covariance estimates
        optimal_state_estimate_k, covariance_estimate_k = ekf(
            obs_vector_z_k, z_k_1[k-1],# Most recent sensor measurement both sensor 1 and sensor 2
            state_estimate_k_minus_1, # Our most recent estimate of the state
            control_vector_k_minus_1, # Our most recent control input
            P_k_minus_1, # Our most recent state covariance matrix
            dk) # Time interval
         
        # Get ready for the next timestep by updating the variable values
        state_estimate_k_minus_1 = optimal_state_estimate_k
        P_k_minus_1 = covariance_estimate_k
         
        # Print a blank line
        print()

for i in range(100):
    x_coord.append(i+1)
main()
plt.plot(estimated_x,color='r', label='estimate')
plt.plot(x_coord,'g-', label='original')
plt.plot(sensor1_x,'b.', label='sensor1')
plt.plot(sensor2_x,'y.', label='sensor2')

plt.legend()
plt.show()

for i in estimated:
    print('[',i[0],',',i[1],',',i[2],']',',')

'''
Sensor 1
# Add some random noise to x, y, and z
x = 0 + random.uniform(-1, 1)
y = 0 + random.uniform(-0.8, 0.7)
z_temp += random.uniform(-0.5, 0.9)

Sensor 2
x = 0 + random.uniform(-1.2, 0.7)
y = 0 + random.uniform(-0.3, 1)
z_temp += random.uniform(-1, 1.5)


Estimated State Cov Matrix
[[ 0.17024755  0.01307846 -0.00916452]
 [ 0.01307846  0.06949581 -0.00838837]
 [-0.00916452 -0.00838837  0.12271302]]

RMS
[0.45888701 0.3269897  0.36281809]

Min
[-1.08135549 -0.3333603  -0.52508301]

Max
[0.610132   0.71217567 0.79866231]



'''